/*

슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 
원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.

이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만,
실패율을 구하는 부분에서 위기에 빠지고 말았다. 오렐리를 위해 실패율을 구하는 코드를 완성하라.

실패율은 다음과 같이 정의한다.
스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 
실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

제한사항

스테이지의 개수 N은 1 이상 500 이하의 자연수이다.
stages의 길이는 1 이상 200,000 이하이다.
stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.
각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.

입출력 예

N	stages	result
5	[2, 1, 2, 6, 2, 4, 3, 3]	[3,4,2,1,5]
4	[4,4,4,4,4]	[4,1,2,3]


[ 풀이 ]

N개의 스테이지중 실패율이 높은 순서대로 리턴하는게 이 문제의 목적이다.
일단 실패율을 구하는게 우선인데 
내가 실패율을 구했던 방식은 Collections.frequency()로 리스트 안의 해당 스테이지의 숫자 개수를 구하고
list.size()로 리스트의 사이즈를 구하고 둘이 나눠주면 실패율이 나온다.
그 뒤 다음 실패율은 size에 frequency로 구한 값을 빼주고 모든 스테이지의 실패율을 계산한다.
그 실패율을 계산한 것을 Double형 리스트에 넣어주고, Arrays.sort에 new Comparator를 쓰면 내가 원하는 방식으로 정렬 할 수 있다.
리턴할 값 즉 각 스테이지를 나타내는 1, 2, 3, 4, 5를 담은 인티저 배열 b를 만들어주고 이 b를 Sort한다.
Sort방식은 dList.get(o1-1)>dList.get(o2-1)로 1이라는 값은 double형 리스트 1번째 인덱스에 그 실패율이 담겨져 있다.
그래서 실패율이 크면 앞으로 가게하고 아니면 뒤로가게한다. 
실패율이 같을 경우는 번호가 작은 스테이지가 앞으로 가게 하면 되기때문에 return 0으로 그대로 나둬주면 된다.
그 뒤 정렬된 이 배열을 answer 배열에 담고 그대로 리턴해주면 정답이다.


*/

import java.util.*;
import java.util.stream.Collectors;

public class Solution {

    public static void main(String[] args) {
        Solution s = new Solution();
        int N = 4;
        int[] stages = {4,4,4,4,4};
        System.out.println(s.solution(N,stages));
    }
    public int[] solution(int N, int[] stages) {
        Integer b[] = new Integer[N];
        ArrayList<Integer> ar = new ArrayList<>();
        List<Integer> intList = Arrays.stream(stages).boxed().collect(Collectors.toList());
        ArrayList<Double> dList = new ArrayList<>();
        int[] answer = new int[N];
        Arrays.sort(stages);
        for (int i = 0; i < b.length; i++) b[i] = i+1;

        int size = intList.size();
        for (int i = 0; i < b.length; i++) {
            int o1Index = Collections.frequency(intList,b[i]);
            dList.add((double)o1Index/size);
            size = size-o1Index;
        }
        System.out.println(dList);
        Arrays.sort(b, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                if(dList.get(o1-1)>dList.get(o2-1)){
                    return -1;
                }else if(dList.get(o1-1)<dList.get(o2-1)){
                    return 1;
                }else {
                    return 0;
                }
            }
        });
        for (int i = 0; i < b.length; i++) {
            answer[i] = b[i];
        }
        return answer;
    }
}
