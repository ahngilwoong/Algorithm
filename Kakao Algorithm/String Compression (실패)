프로그래머스 테스트 케이스 2,3,8,13,17,19,22,27 실패 (30퍼 실패)

"abrabcabcadqabcabc"에 대한 테스트 케이스 실패 -> 17번 예상
(3개로 쪼개었을때 abc/abc 검사후 다른 문자를 만나고 또 abc/abc를 만날때의 처리 아래 코드는 HashMap 특성상 겹쳐버림)









import java.util.HashMap;

public class StringZip {

    public static void main(String[] args) {
        StringZip sz = new StringZip();
        String s = "abrabcabcadqabcabc"; // "abrabcabcadqabcabc"
        System.out.println(sz.solution(s));
    }

    public int solution(String s) {
        HashMap<String,Integer> hs = new HashMap();
        int minimum = s.length(); 
        int count = 0; // => 삭제된 문자열의 개수
        int cnt=1; // => 검사 중 다른 문자를 만났는지 판별하기 위한 cnt
        int hsSize = 0; // 해쉬 맵의 크기를 저장할 변수
        int len = s.length();
        boolean checked = false;
        String pan = "";
        //문자열 2개이상부터 압축 가능
        //i반복문은 자르는 개수를 점점 증가시키는 것
        //자르려면 최소 2개 이상은 나와야하기 때문에 길이에 2를 나눈거 까지만 돌아도 된다.
        for(int i=1; i<=len/2; i++) {
            String cut = s.substring(0, i);
            cnt = 1;
            count=0;
            //j는 위 cut을 뺀 문자열의 길이만큼 반복하고 자르는 개수만큼 증가
            for (int j = i; j <= len - i; j += i) {
                if (cut.equals(s.substring(j, j + i))) {
                    //문자가 겹쳐서 문자가 삭제되고 숫자가 추가되는데 그 숫자의 값을 구하기위해 해쉬맵 사용
                    cnt++;
                    count++;
                    // 다른문자를 만난적이 있다가 다시 같은 문자를 조사해야하는 부분이 발생 했을 때
                        hs.put(cut,count);

                    continue;
                } else {
                    //위의 if문을 안거친 상태 즉 아직 같은 문자열을 안 만남
                    if(cnt==1){
                        checked=false;
                    }else{ // 같은 문자열을 만난적이 있고 지금은 서로 다른 문자열인 상태
                        checked = true;
                    }
                    cut = s.substring(j, j + i);
                    cnt = 1;
                }
            }

            // 자른 문자가 있을경우
            if(count!=0){
            
                // 자른문자가 10개 이상일경우 숫자 10이 추가 됨으로 그에 따른 자리수 증가 코드     
                if(count >=9){
                    hsSize = hs.size()*2;
                    if(count>=99){
                        hsSize=hs.size()*3;
                    }
                }else{
                    hsSize = hs.size();
                }
                
//              문자열 길이 - (자른 문자 갯수 X 삭제된 문자 count 갯수) + 생성된 숫자 갯수 = 답
                int result = len-(i*count)+hsSize;
                System.out.println(hs);
//                System.out.println("len : "+len+" i : "+i+" count : "+ count+ " hs.size : "+ hsSize+"="+result);
                minimum = Math.min(minimum,result);
            }
            checked=false;
            answer=0;
            hs.clear();
        }

        return minimum;
    }
}
