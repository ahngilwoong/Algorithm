/*

Test Case :

"(()())()"	
")("
"()))((()"	

Return :

"(()())()"
"()"
"()(())()"


짝이 맞는 괄호들을 아무렇게나 형식에 맞지 않게 주어졌을 때
주어진 조건에 따라 올바른 괄호를 리턴하는 문제이다.

문제에서 주어진 올바른 괄호를 만드는 조건은

1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환합니다.

이다. 재귀함수를 이용해서 해결하였다
밑의 코드중 flag 메소드는 괄호가 올바른 괄호 형식인지 판단하는 메소드이고
Solution 메소드는 문제에 주어진 조건에 따라 만든 메소드이다.
문자열 변수 u,v가 있는데
u에는 균형이 잡힌 글을 넣으면 되고(올바른 괄호가 아니라 짝이 맞는 균형잡힌 괄호) v에는 그 나머지들을 넣는다.
answer은 정답을 리턴할 변수이고 uFlag와 vFlag는 문자열 u와 v에 대해 올바른 괄호인지 판단하는 boolean 변수이다.

받은 p에 대해서 문자열 하나씩 검사하며 (를 만나면 카운트를 더해주고 )를 만나면 카운트를 빼준다. 
그 후 cnt가 0이되면 균형이 잡혀있는 글의 끝의 인덱스가 나오기 때문에 그 인덱스 i를 num변수에 저장해주고 이를 바탕으로 subString으로 u와 v를 나눠준다.
그 후 flag메소드를 사용하여 u가 올바른 괄호인지 판단하였고, 그에 따른 if문을 넣어주었다.
u가 형식에 맞는 올바른 괄호라면 위의 조건 3번에 따라 u를 정답을 리턴하는 answer에 넣어주고 재귀를 사용하기 위해 return answer + solution(v)를 해준다.
그러면 v에 대해 다시 판별이 이루어질 것이고 answer에 차곡차곡 괄호가 쌓인 것을 리턴 해준다.
u가 올바르지 않은 괄호라면 위의 4번 조건에 따라 다른 조건으로 리턴된다.

  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  는
  answer += "(";
  answer += solution(v);
  answer += ")";
  이다.
  
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환합니다.
  는
  for (int i = 1; i < u.length()-1; i++) {
       if (Character.toString(u.charAt(i)).equals("(")) {
           answer += ")";
       } else {
           answer += "(";
       }
  }
  이다.
  
  1부터 문자열 끝-1을 반복문으로 돌고 작업해주면 첫번째 문자와 마지막 문자를 제거하고 뒤집힌 것이다.
  그 후 리턴을 하면 정답이 나온다.
  
  flag 메소드는 올바른 괄호인지 판단하는 메소드인데
  Stack을 사용하여 문자열의 길이만큼 반복하여 (를 만나면 push, 비어있는 상태에서 )를 만나면 잘못된 괄호임을 리턴하고
  스택이 안 비어있는 상태에서 )를 만나면 pop시키는 방법으로 
  Stack.isEmpty면 올바른 괄호 아니라면 잘못된 괄호를 리턴하는 메소드이다.

*/

import java.util.Stack;

public class bracketTest2 {
    public static void main(String[] args) {
        bracketTest2 bt = new bracketTest2();
        String p = "))()()()((";
        System.out.println(bt.solution(p));
    }


    public String solution(String p) {
        StringBuilder sb = new StringBuilder(p);
        Stack<String> st = new Stack<>();
        String u = "";
        String v = "";
        String answer = "";
        boolean uFlag = true;
        boolean vFlag = true;
        int num = 0;
        int cnt = 0;
        for (int i = 0; i < sb.length(); i++) {
            String t = Character.toString(sb.charAt(i));
            if (t.equals("("))
                cnt++;
            else
                cnt--;
            if (cnt == 0) {
                num = i + 1;
                break;
            }
        }
        u = sb.substring(0, num);
        v = sb.substring(num, sb.length());
        uFlag = flag(u);
        vFlag = flag(v);
        if (uFlag == true) {
            answer += u;
            if (v.equals("")) {
                return answer;
            }
            return answer + solution(v);
        } else {
            answer += "(";
            answer += solution(v);
            answer += ")";
            for (int i = 1; i < u.length()-1; i++) {
                if (Character.toString(u.charAt(i)).equals("(")) {
                    answer += ")";
                } else {
                    answer += "(";
                }
            }

        }
        return answer;
    }


    public static boolean flag(String s){
        Stack<String> st = new Stack<>();
        for(int i=0; i<s.length(); i++){
            String t = Character.toString(s.charAt(i));
            if(t.equals("(")){
                st.push(t);
            }else{
                if(st.isEmpty()&&t.equals(")")){
                    return false;
                }
                st.pop();
            }
        }
        if(st.isEmpty()){
            return true;
        }else{
            return false;
        }
    }

}
