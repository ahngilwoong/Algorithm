/*
   수학 문제이다.
   
문제

영훈이는 태형이에게 어떤 수 N과 K를 주었다.

태형이는 N을 종이에 쓰기 시작했다. 태형이는 자신이 이 수를 몇 번 써야 그 수가 K로 나누어지는지 궁금해지기 시작했다.

N=10일 때, 이 수를 한 번 쓰면 10이고, 두 번 쓰면 1010이고, 세 번쓰면 101010이고,... 이런식이다.

어떤 수 N과 K가 주어졌을 때, N을 몇 번 써야 K로 나누어 떨어지는지 구하는 프로그램을 작성하시오.


입력

첫째 줄에 N과 K가 주어진다. N은 1,000,000,000보다 작거나 같은 자연수이다. K는 100,000보다 작거나 같은 자연수이다.

출력

첫째 줄에 몇 번 써야하는지 그 최솟값을 출력한다. 만약 아무리 써도 불가능할 경우에는 -1을 출력한다.



예제 입력 
2 9
예제 출력 
9

즉 2를 하나씩 붙여 (2, 22, 222, 2222 ...) 9로 나누었을때 0으로 떨어지는 수까지 2가 몇번이 쓰이냐 가 문제이다.
문제를 직관적으로 보아 직접 2를 붙여가며 알고리즘을 짜보았다.
문제가 이렇게 쉬울리가 없었다 NumberFormat오류가 떠서 실패하였다. 이유는 N으로 주어진 숫자의 범위가 큰데 이게 자릿수가 배로 증가해버리면 범위를 초과해버리기 때문에
연산이 불가하기 때문이다. 그로인해 규칙을 찾아보기도 했으나 마땅한 규칙이 없었다.
문득 다른 알고리즘을 풀 때 큰 수를 리턴할때 나머지 값을 리턴하라는 것이 떠올라서
나머지 값에 N을 붙여가며 연산을 해봤더니 성공하였다.
나머지 값에 대해 연산을 해도 똑같은 결과가 나온다. 나는 우연히 발견하였지만 검색해보니 모듈러 산술에 의거한 방법이였다. 정말 신기하다.
규칙을 찾던 와중 0으로 떨어지는 수들은 N이 K를 넘어가지 않은것을 발견했고  만약 아무리 써도 불가능할 경우에는 -1을 출력한다. 이 부분을 붙인 숫자를 센 카운트가ㅡ
K를 넘으면 아무리 써도 불가능한 경우임으로 -1을 리턴하게 하였다.
그 뒤 결과를 나타내니 정답이였다.

*/



import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long N = sc.nextLong();
        int K = sc.nextInt();
        int cnt = 1;
        long a = N;
        while (true){
            if(cnt>K) {
                System.out.println(-1);
                break;
            }
            if(N%K!=0){
                String str = Long.toString(N%K);
                str+=a;
                N = Long.parseLong(str);
                cnt++;
            }else{
                System.out.println(cnt);
                break;
            }
        }

    }
}
