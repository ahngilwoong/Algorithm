/*

 문제 설명
 
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.
입출력 예
array	commands	return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]


Arrays.copyOfRange를 사용하면 substring처럼 배열을 잘라낼수 있다.
일단 중첩반복문을 사용하여 commands의 길이만큼 돌도록 하였고 2차원 배열안의 수들은 리스트에 넣었다.
넣고 나서 리스트 안의 수들을 이용하여 copyOfRange를 이용하여 문제의 조건대로 잘라냈고 Arrays.sort로 정렬 후에 해당 번호의 인덱스를 answer배열에 추가하였다.





*/



import java.util.ArrayList;
import java.util.Arrays;

public class kNumber {

    public static void main(String[] args) {
        kNumber s = new kNumber();
        int[] array = {1,5,2,6,3,7,4};
        int[][] commmands ={{2,5,3},{4,4,1},{1,7,3}};
        System.out.println(s.solution(array,commmands));
    }
    public int[] solution(int[] array, int[][] commands) {
        int[] answer = new int[commands.length];
        ArrayList<Integer> ar = new ArrayList<>();
        for (int i = 0; i < commands.length; i++) {
            ar.clear();
            for (int j = 0; j < commands[i].length; j++) {
                ar.add(commands[i][j]);
            }
            int[] objArray = Arrays.copyOfRange(array,ar.get(0)-1,ar.get(1));
            Arrays.sort(objArray);
            answer[i] = objArray[ar.get(2)-1];
        }

        return answer;
    }

}
