/*

타일로 더 이상 크기가 N인 모든 2진 수열을 만들 수 없게 되었다. 
예를 들어, N=1일 때 1만 만들 수 있고, N=2일 때는 00, 11을 만들 수 있다. 
(01, 10은 만들 수 없게 되었다.) 또한 N=4일 때는 0011, 0000, 1001, 1100, 1111 등 총 5개의 2진 수열을 만들 수 있다.

TestCase :

4

Return :

5

위 문제대로 수 들을 나열해보면
N.        SIZE 
0.        0
1.        1
2.        2
3.        3 
4.        5
5.        8
6.        13

리턴 값들이 피보나치 수열을 이루고 있다.
효율적인 알고리즘을 짜기 위해 다이나믹 프로그래밍을 사용하여
반복되는 작업을 안하도록 미리 구해놓고 불러오도록 하였다.
0과 1과 2의 값을 미리 넣고
3부터는 피보나치를 구하듯 n = n-1 + n-2의 형태로 배열에
저장하였고 Input값을 받으면 해당 배열 인덱스의 값을 리턴한다.

*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class tile {
    static int[] dp = new int[1000001];
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int num = Integer.parseInt(br.readLine());
        if(num==0){
            System.out.println(0%15746);
        }else if(num==1){
            System.out.println(1%15746);
        }else if(num==2){
            System.out.println(2%15746);
        }else{
            dp[0] = 0;
            dp[1] = 1;
            dp[2] = 2;
            for(int i=3; i<1000001; i++){
                dp[i] = (dp[i-1] + dp[i-2])%15746;
            }
            long answer = dp[num];
            System.out.println(answer);
        }
    }
}
