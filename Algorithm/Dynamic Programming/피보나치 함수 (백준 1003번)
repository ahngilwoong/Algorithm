/*

피보나치 함수의 특성을 이용한 동적계획법 문제이다.

Test Case : 

3
0
1
3

Return :

1 0
0 1
1 2

첫번째 줄은 input될 케이스의 수를 알려주고 2번째 줄부터 계산될 input값이다.
문제는
fibonacci(3)은 fibonacci(2)와 fibonacci(1) (첫 번째 호출)을 호출한다.
fibonacci(2)는 fibonacci(1) (두 번째 호출)과 fibonacci(0)을 호출한다.
두 번째 호출한 fibonacci(1)은 1을 출력하고 1을 리턴한다.
fibonacci(0)은 0을 출력하고, 0을 리턴한다.
fibonacci(2)는 fibonacci(1)과 fibonacci(0)의 결과를 얻고, 1을 리턴한다.
첫 번째 호출한 fibonacci(1)은 1을 출력하고, 1을 리턴한다.
fibonacci(3)은 fibonacci(2)와 fibonacci(1)의 결과를 얻고, 2를 리턴한다.

즉 0이 들어오면 fibonacci(0)은 한번 호출되고 fibonacci(1)은 0번 호출되니 
리턴 값은 0 1이다.

문제를 처음 보고 아 너무 쉽다 하면서 static으로 cnt함수를 선언해주고 0과 1이 호출 될대마다 ++를 해주며 알고리즘을 짰는데
시간초과가 바로 나버렸다. 효율적으로 풀어야한다.

그래서 이 문제는 동적계획법의 기본적인 문제라고 볼수 있다.
문제에서 들어올 인풋값의 최대 크기가 자연수 40이라고 했다.
그래서 static으로 클래스 배열을 만들어 0이 호출된 수를 담을 dp[0]
1이 호출될 수를 담을 dp[1]을 41의 크기만큼 만들었다.

그 후 계산 안해도 바로 나오는 기본 값인 0일때의 1 과 0, 1일때의 0 과 1을 각 배열의 0번째 1번째 인덱스에 넣어줬고,
위 문제의 규칙을 찾아 배열의 크기만큼 반복해주었다.

위 문제의 규칙은
input : 0. return 0 1
input : 1. return 1 0
input : 2. return 1 1
input : 3. return 1 2
input : 4. return 2 3
input : 5. return 3 5
input : 6. return 5 8
~
input : 40. return 39의 마지막 리턴값 39의 첫번째 리턴값+마지막 리턴 값이 리턴 된다.
즉 input 6의 리턴값인 5와 8은
input 5의 마지막 리턴값인 5가 나오고 그 뒤 input 5의 리턴값을 두개 더한값인 8이 나온다.
그래서 input 6은 5와 8이 나온다.
이러한 규칙을 이용하여 배열에 값을 싹 구해놓고 인풋 값에 따라서 값을 리턴하면 반복적인 작업을 안하고 아주 효율적으로 리턴할 수 있다.

*/

import java.io.*;

public class fibo {
    static int[] dp0 = new int[41];
    static int[] dp1 = new int[41];
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int num = Integer.parseInt(br.readLine());
        dp0[0] = 1;
        dp1[0] = 0;
        dp0[1] = 0;
        dp1[1] = 1;
        for(int i = 2; i <= 40; i++){
            dp0[i] = dp1[i - 1];
            dp1[i] = dp0[i - 1] + dp1[i - 1];
        }
        for (int i = 0; i < num; i++) {
            int n = Integer.parseInt(br.readLine());
            bw.write(dp0[n] + " " + dp1[n] + "\n");
        }
        bw.flush();
        bw.close();
        br.close();

    }
}
