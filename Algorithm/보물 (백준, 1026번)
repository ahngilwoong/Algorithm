/*

S = A[0]×B[0] + ... + A[N-1]×B[N-1]
S의 값을 가장 작게 만들기 위해 A의 수를 재배열하자. 단, B에 있는 수는 재배열하면 안 된다.

S의 최솟값을 출력하는 프로그램을 작성하시오.


첫째 줄에 S의 최솟값을 출력한다.


TestCase :

S: 5
A array: 1 1 1 6 0
B array: 2 7 8 3 1



Return :

18


말 그대로 두 배열의 각 인덱스의 곱의 합으로 최솟값을 나타내는 것이다.
문제가 좀 이상하다.
밑의 첫 알고리즘은 문제의 조건을 안따르고 정답이다.
두 번쨰 알고리즘은 문제의 조건을 따르고 풀었는데 정답처리가 안된다.
테스트 케이스 찾기 불가로 첫번쨰 문제 정답으로 대체하였다.

*/



import java.util.*;
public class Solution {
    public static void main(String[] args)  {
        Scanner sc = new Scanner(System.in);
        Stack<Integer> st = new Stack<>();
        int num = sc.nextInt();
        int answer = 0;
        int[] A = new int[num];
        int[] B = new int[num];

        for (int i = 0; i < num; i++) {
            A[i] = sc.nextInt();
        }
        for (int i = 0; i < num; i++) {
            B[i] = sc.nextInt();
        }
        Arrays.sort(A);
        Arrays.sort(B);

        for (int i = 0; i < num; i++) {
            answer+=A[i]*B[num-1-i];
        }

        System.out.println(answer);
    }

    }
    
    
    
    
    
    
    
    
    
    
    
    =========================
    
    
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        Stack<Integer> st = new Stack<>();
        int num = Integer.parseInt(br.readLine());
        String[] first = new String[num];
        String[] second = new String[num];
        first = br.readLine().split(" ");
        second = br.readLine().split(" ");
        int[] fNums = Arrays.asList(first).stream().mapToInt(Integer::parseInt).toArray();
        int[] sNums = Arrays.asList(second).stream().mapToInt(Integer::parseInt).toArray();
        int[] sNums2 = Arrays.asList(second).stream().mapToInt(Integer::parseInt).toArray();
        Arrays.sort(fNums);
        int answer = 0;
        for (int i = sNums.length-1; i >= 0; i--) {
            st.push(fNums[i]);
        }
        int[] ans = new int[fNums.length];
        while (!st.isEmpty()){
            int max = 0;
            int index = 0;
            for (int i = 0; i < sNums.length; i++) {
                if(max < sNums[i]){
                    max = sNums[i];
                    index = i;
                }
            }
            sNums[index] = 0;
            ans[index] = st.peek();
            st.pop();
        }
        for (int i = 0; i < ans.length; i++) {
            System.out.println(ans[i]);
            answer += ans[i] * sNums2[i];
        }
        System.out.println(answer);
