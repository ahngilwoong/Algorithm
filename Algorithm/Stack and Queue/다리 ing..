import java.util.*;

public class Question03 {

    public static void main(String[] args) {
        Question03 question03 = new Question03();
        int[] truck_weights = {2,2,2,2,1,1,1,1,1};
        int bridge_length = 5;
        int weight = 5;
        System.out.println(question03.solution(bridge_length ,weight ,truck_weights));
    }


    public int solution(int bridge_length, int weight, int[] truck_weights) {
        Queue<Integer> weight_truck = new LinkedList<>();
        Queue<Integer> crossing_bridge_truck = new LinkedList<>();
        Queue<Integer> no_entry_count = new LinkedList<>();
        int second = 0;
        int crossing_truck = 0;
        int predict_weight = 0;
        int wait_count = 0;
        int wait_truck = 0;
        int complete_cnt = 0;

        for(int x : truck_weights){
            weight_truck.add(x);
        }

        while (complete_cnt != truck_weights.length){
            second++;

            if(crossing_bridge_truck.isEmpty()){
                crossing_truck = weight_truck.isEmpty() ? 0 : weight_truck.poll();
                crossing_bridge_truck.add(crossing_truck);
                no_entry_count.add(second+bridge_length);
                continue;
            }

            if(second == no_entry_count.peek()){
                complete_cnt++;
                crossing_bridge_truck.remove();
                if(crossing_bridge_truck.isEmpty() && weight_truck.isEmpty()){
                    break;
                }
                no_entry_count.remove();
            }

            crossing_truck = crossing_bridge_truck.isEmpty() ? 0 : crossing_bridge_truck.stream().reduce(0,Integer::sum);
            wait_truck = weight_truck.isEmpty() ? 0 : weight_truck.peek();
            predict_weight = crossing_truck + wait_truck;

            if(predict_weight <= weight && !weight_truck.isEmpty()){
                crossing_bridge_truck.add(weight_truck.poll());
                wait_count = wait_count == 0 ? 0 : wait_count - 1;
                no_entry_count.add(second+bridge_length+wait_count);
                wait_count = 0;
                continue;
            }

            wait_count++;

        }
        return second;
    }


}
